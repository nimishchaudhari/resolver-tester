name: SWE-Agent Issue Resolver

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  generate-patch:
    name: Generate Patch with SWE-Agent
    if: github.event.issue.pull_request == null && contains(github.event.comment.body, '@swe-agent') && github.event.comment.user.login != 'github-actions[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    outputs:
      patch_generated: ${{ steps.swe-agent.outputs.patch_generated }}
      patch_content: ${{ steps.swe-agent.outputs.patch_content }}
      execution_time: ${{ steps.swe-agent.outputs.execution_time }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Run SWE-Agent
        id: swe-agent
        uses: nimishchaudhari/SWE-agent-resolver@v0.01
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          llm_api_key: ${{ secrets.OPENAI_API_KEY }}
          model_name: ${{ vars.SWE_AGENT_MODEL || 'gpt-4o' }}
          trigger_phrase: '@swe-agent'
          timeout_minutes: 45

  apply-patch:
    name: Apply Patch and Create PR
    needs: generate-patch
    if: needs.generate-patch.outputs.patch_generated == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python (for linting)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      
      - name: Install linting tools (optional)
        run: |
          pip install black isort flake8 || true
      
      - name: Apply patch and create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PATCH_CONTENT: ${{ needs.generate-patch.outputs.patch_content }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          MODEL_NAME: ${{ vars.SWE_AGENT_MODEL || 'gpt-4o' }}
          EXECUTION_TIME: ${{ needs.generate-patch.outputs.execution_time }}
        run: |
          set -e
          
          # Configure git
          git config --global user.name "swe-agent-bot[bot]"
          git config --global user.email "swe-agent-bot[bot]@users.noreply.github.com"
          
          # Create branch
          BRANCH_NAME="swe-agent-fix-issue-${ISSUE_NUMBER}-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          
          # Apply patch
          echo "$PATCH_CONTENT" > /tmp/swe_agent_fix.patch
          
          if git apply --check /tmp/swe_agent_fix.patch; then
            git apply /tmp/swe_agent_fix.patch
            
            # Run linting/formatting if tools are available
            if command -v black >/dev/null 2>&1; then
              find . -name "*.py" -exec black {} + || true
            fi
            
            if command -v isort >/dev/null 2>&1; then
              find . -name "*.py" -exec isort {} + || true
            fi
            
            # Stage all changes first
            git add .
            
            # Check if there are any changes to commit
            if git diff --cached --quiet; then
              echo "No changes detected after applying patch"
              exit 1
            fi
            
            # Commit changes with proper multi-line message
            git commit -m "Fix: Apply patch for issue #${ISSUE_NUMBER} by SWE-Agent" \
                       -m "Issue: ${ISSUE_TITLE}" \
                       -m "Model: ${MODEL_NAME}" \
                       -m "Execution Time: ${EXECUTION_TIME}"
            
            # Push branch
            git push origin "$BRANCH_NAME"
            
            # Create PR using GitHub CLI
            PR_TITLE="SWE-Agent Fix for Issue #${ISSUE_NUMBER}: ${ISSUE_TITLE}"
            PR_BODY="This Pull Request was automatically generated by SWE-Agent.
          
          **Issue:** #${ISSUE_NUMBER} - ${ISSUE_TITLE}
          **Model:** ${MODEL_NAME}
          **Execution Time:** ${EXECUTION_TIME}
          
          ## üîß Generated Patch
          \`\`\`diff
          ${PATCH_CONTENT}
          \`\`\`
          
          ## üìù Next Steps
          1. **Review** the changes in this PR
          2. **Test** the changes locally if needed
          3. **Merge** the PR if it resolves the issue
          
          ---
          *‚ú® Generated by SWE-Agent using ${MODEL_NAME}*"
            
            # Get default branch
            DEFAULT_BRANCH=$(gh api repos/${{ github.repository }} --jq .default_branch)
            
            # Create PR
            PR_URL=$(gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --base "$DEFAULT_BRANCH" \
              --head "$BRANCH_NAME")
            
            # Update the issue comment with success message
            COMMENT_ID="${{ github.event.comment.id }}"
            SUCCESS_BODY="‚úÖ **Solution Generated & Pull Request Created!**
          
          **Issue:** #${ISSUE_NUMBER} - ${ISSUE_TITLE}
          **Model:** ${MODEL_NAME}
          **Execution Time:** ${EXECUTION_TIME}
          **Pull Request:** [View PR](${PR_URL})
          
          ## üîß Generated Patch
          \`\`\`diff
          ${PATCH_CONTENT}
          \`\`\`
          
          ## üìù Next Steps
          1. **Review** the Pull Request: [${PR_TITLE}](${PR_URL})
          2. **Test** the changes in the PR
          3. **Merge** the PR if it resolves the issue
          
          ---
          *‚ú® Generated by SWE-Agent using ${MODEL_NAME}*"
          
            echo "$SUCCESS_BODY" | gh api repos/${{ github.repository }}/issues/comments/$COMMENT_ID \
              --method PATCH \
              --field body=@-
          
          else
            echo "Patch could not be applied cleanly"
            
            # Update the issue comment with patch that couldn't be applied
            COMMENT_ID="${{ github.event.comment.id }}"
            FAILURE_BODY="‚ö†Ô∏è **Patch Generated but Cannot Apply Cleanly**
          
          **Issue:** #${ISSUE_NUMBER} - ${ISSUE_TITLE}
          **Model:** ${MODEL_NAME}
          **Execution Time:** ${EXECUTION_TIME}
          
          The generated patch did not pass the \`git apply --check\` step. This may indicate conflicts or outdated file references. Please review and apply manually.
          
          ## üîß Generated Patch (Manual Application Required)
          \`\`\`diff
          ${PATCH_CONTENT}
          \`\`\`
          
          ## üìù Manual Steps
          1. Copy the patch above
          2. Save it to a file (e.g., \`fix.patch\`)
          3. Try \`git apply fix.patch\` or apply changes manually
          4. Create a PR with the changes
          
          ---
          *‚ö†Ô∏è Analysis by SWE-Agent using ${MODEL_NAME}*"
          
            echo "$FAILURE_BODY" | gh api repos/${{ github.repository }}/issues/comments/$COMMENT_ID \
              --method PATCH \
              --field body=@-
            
            exit 1
          fi
